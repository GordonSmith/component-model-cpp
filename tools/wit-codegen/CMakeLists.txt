cmake_minimum_required(VERSION 3.10)

# Find ANTLR4 runtime (should have been found by grammar/CMakeLists.txt)
find_package(antlr4-runtime CONFIG)
if(NOT antlr4-runtime_FOUND)
    message(WARNING "antlr4-runtime not found. Tools will not be built.")
    return()
endif()

# Determine which ANTLR4 library to use based on platform
# Windows uses shared library (DLL), Linux uses static library
if(TARGET antlr4_shared)
    set(ANTLR4_LIBRARY antlr4_shared)
    message(STATUS "Using ANTLR4 shared library")
elseif(TARGET antlr4_static)
    set(ANTLR4_LIBRARY antlr4_static)
    message(STATUS "Using ANTLR4 static library")
else()
    message(FATAL_ERROR "Neither antlr4_shared nor antlr4_static targets are available")
endif()

# Get the ANTLR generated code directory
set(ANTLR_OUTPUT_DIR "${CMAKE_BINARY_DIR}/grammar/grammar")

# List the generated source files explicitly (they will be generated by generate-grammar target)
set(ANTLR_GENERATED_SOURCES
    "${ANTLR_OUTPUT_DIR}/WitLexer.cpp"
    "${ANTLR_OUTPUT_DIR}/WitParser.cpp"
    "${ANTLR_OUTPUT_DIR}/WitVisitor.cpp"
    "${ANTLR_OUTPUT_DIR}/WitBaseVisitor.cpp"
)

# Mark the generated sources as GENERATED so CMake doesn't check for them at configure time
set_source_files_properties(${ANTLR_GENERATED_SOURCES} PROPERTIES GENERATED TRUE)

# WIT code generator using ANTLR grammar
add_executable(wit-codegen
    wit-codegen.cpp
    wit_visitor.cpp
    wit_parser.cpp
    code_generator.cpp
    type_mapper.cpp
    package_registry.cpp
    dependency_resolver.cpp
    ${ANTLR_GENERATED_SOURCES}
)

# Link against ANTLR4 runtime directly
target_link_libraries(wit-codegen PRIVATE
    ${ANTLR4_LIBRARY}
)

# Add include directories for ANTLR generated code and local headers
target_include_directories(wit-codegen PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}/grammar
    ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/antlr4-runtime
)

# Depend on grammar generation
add_dependencies(wit-codegen generate-grammar)

# Set C++ standard
target_compile_features(wit-codegen PRIVATE cxx_std_17)

# ============================================================================
# Installation
# ============================================================================
include(GNUInstallDirs)

# Install wit-codegen executable
install(TARGETS wit-codegen
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    COMPONENT tools
)

# Install ANTLR4 runtime dependencies
if(WIN32)
    # Find and install the ANTLR4 runtime DLL on Windows
    set(ANTLR4_DLL_PATH "${CMAKE_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/bin/antlr4-runtime.dll")
    if(EXISTS "${ANTLR4_DLL_PATH}")
        install(FILES "${ANTLR4_DLL_PATH}"
            DESTINATION ${CMAKE_INSTALL_BINDIR}
            COMPONENT tools
        )
        message(STATUS "Will install ANTLR4 runtime DLL: ${ANTLR4_DLL_PATH}")
    else()
        message(WARNING "ANTLR4 runtime DLL not found at: ${ANTLR4_DLL_PATH}")
    endif()
elseif(UNIX AND TARGET antlr4_shared)
    # On Linux/macOS, install the shared library
    if(APPLE)
        set(ANTLR4_LIB_PATTERN "libantlr4-runtime*.dylib")
    else()
        set(ANTLR4_LIB_PATTERN "libantlr4-runtime.so*")
    endif()
    
    file(GLOB ANTLR4_LIBS "${CMAKE_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/lib/${ANTLR4_LIB_PATTERN}")
    if(ANTLR4_LIBS)
        install(FILES ${ANTLR4_LIBS}
            DESTINATION ${CMAKE_INSTALL_LIBDIR}
            COMPONENT tools
        )
        message(STATUS "Will install ANTLR4 runtime libraries: ${ANTLR4_LIBS}")
    endif()
endif()
