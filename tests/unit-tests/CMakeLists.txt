project(unit-tests)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(--coverage)
    add_link_options(--coverage)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-fprofile-instr-generate -fcoverage-mapping)
    add_link_options(-fprofile-instr-generate)
endif()

# Suppress narrowing conversion warnings on MSVC for WebAssembly 32-bit ABI
if(MSVC)
    add_compile_options(
        /wd4244  # conversion from 'type1' to 'type2', possible loss of data
        /wd4267  # conversion from 'size_t' to 'type', possible loss of data
        /wd4305  # truncation from 'type1' to 'type2'
        /wd4309  # truncation of constant value
    )
endif()

find_package(doctest CONFIG REQUIRED)
find_package(ICU REQUIRED COMPONENTS uc dt in io)

include_directories(
    ${CMAKE_CURRENT_LIST_DIR}/../include
    ${ICU_INCLUDE_DIR}
)

add_executable(${PROJECT_NAME} 
  main.cpp
  scratchpad.cpp
  host-util.hpp
  host-util.cpp
)

target_link_libraries(${PROJECT_NAME} 
  PRIVATE doctest::doctest
  PRIVATE cmcpp
  PRIVATE ${ICU_LIBRARIES}
)

add_test(
  NAME ${PROJECT_NAME}
  COMMAND $<TARGET_FILE:${PROJECT_NAME}>
)

# ===== Grammar Test Suite =====
# Build the test executable that validates the WIT grammar against wit-bindgen test files
# This test is only built if WIT_CODEGEN is enabled and generate-grammar target exists

# Check if grammar generation was configured (only if WIT_CODEGEN is ON)
if(WIT_CODEGEN AND TARGET generate-grammar)
    message(STATUS "Building grammar test executable...")
    
    # Find ANTLR4 runtime (should have been found by grammar/CMakeLists.txt)
    find_package(antlr4-runtime CONFIG)
    if(NOT antlr4-runtime_FOUND)
        message(WARNING "antlr4-runtime not found. Grammar test will not be built.")
        return()
    endif()
    
    # Determine which ANTLR4 library to use based on platform
    # Windows uses shared library (DLL), Linux uses static library
    if(TARGET antlr4_shared)
        set(ANTLR4_LIBRARY antlr4_shared)
        message(STATUS "Using ANTLR4 shared library for grammar tests")
    elseif(TARGET antlr4_static)
        set(ANTLR4_LIBRARY antlr4_static)
        message(STATUS "Using ANTLR4 static library for grammar tests")
    else()
        message(FATAL_ERROR "Neither antlr4_shared nor antlr4_static targets are available")
    endif()
    
    # Get the ANTLR generated code directory
    set(ANTLR_OUTPUT_DIR "${CMAKE_BINARY_DIR}/grammar/grammar")
    
    # List the generated source files explicitly (they will be generated by generate-grammar target)
    set(ANTLR_GENERATED_SOURCES
        "${ANTLR_OUTPUT_DIR}/WitLexer.cpp"
        "${ANTLR_OUTPUT_DIR}/WitParser.cpp"
        "${ANTLR_OUTPUT_DIR}/WitVisitor.cpp"
        "${ANTLR_OUTPUT_DIR}/WitBaseVisitor.cpp"
    )
    
    # Mark the generated sources as GENERATED so CMake doesn't check for them at configure time
    set_source_files_properties(${ANTLR_GENERATED_SOURCES} PROPERTIES GENERATED TRUE)
    
    # Create the grammar test executable
    add_executable(test-wit-grammar
        test_grammar.cpp
        ${ANTLR_GENERATED_SOURCES}
    )
    
    # Link against ANTLR4 runtime directly
    target_link_libraries(test-wit-grammar
        PRIVATE ${ANTLR4_LIBRARY}
    )
    
    # Set C++ standard for the test
    target_compile_features(test-wit-grammar PUBLIC cxx_std_17)
    
    # Define the test directory path at compile time
    target_compile_definitions(test-wit-grammar PRIVATE
        WIT_TEST_DIR="${CMAKE_SOURCE_DIR}/ref/wit-bindgen/tests/codegen"
    )
    
    # Add include directories
    target_include_directories(test-wit-grammar PRIVATE
        ${CMAKE_BINARY_DIR}/grammar
        ${CMAKE_BINARY_DIR}/grammar/grammar
        ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/antlr4-runtime
    )
    
    # Depend on grammar generation
    add_dependencies(test-wit-grammar generate-grammar)
    
    # Add the test
    add_test(
        NAME wit-grammar-test
        COMMAND test-wit-grammar
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    )
    
    # Set test properties
    set_tests_properties(wit-grammar-test PROPERTIES
        LABELS "grammar"
        TIMEOUT 120
    )
    
    message(STATUS "Grammar test configuration:")
    message(STATUS "  Test executable: test-wit-grammar")
    message(STATUS "  Test directory: ref/wit-bindgen/tests/codegen")
else()
    message(STATUS "Grammar library not built, skipping grammar tests")
    message(STATUS "  Enable with: cmake -DWIT_CODEGEN=ON")
endif()

# ===== WIT Stub Generation and Validation Tests =====
# Include the stub generation test module which generates and compiles stubs
# to validate the complete code generation pipeline
include(StubGenerationTests.cmake)
